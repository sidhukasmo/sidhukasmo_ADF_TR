{
	"name": "df_SCD_Type1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DT_CustomerSource",
						"type": "DatasetReference"
					},
					"name": "customerSource"
				},
				{
					"dataset": {
						"referenceName": "DT_DimCustomer",
						"type": "DatasetReference"
					},
					"name": "CustomerDim",
					"description": "Add Ref dataset"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DT_DimCustomer",
						"type": "DatasetReference"
					},
					"name": "sink1Insert"
				},
				{
					"dataset": {
						"referenceName": "DT_DimCustomer",
						"type": "DatasetReference"
					},
					"name": "sink1Update"
				}
			],
			"transformations": [
				{
					"name": "existsNO"
				},
				{
					"name": "alterRowUpdate"
				},
				{
					"name": "alterRowInsert"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Cust_ID as integer,",
				"          Customer_Name as string,",
				"          Customer_location as string,",
				"          Purchase_Amount as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> customerSource",
				"source(output(",
				"          Cust_ID as integer,",
				"          Customer_Name as string,",
				"          Customer_location as string,",
				"          Purchase_Amount as integer,",
				"          Date_inserted as date,",
				"          Date_Updated as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> CustomerDim",
				"customerSource, CustomerDim exists(customerSource@Cust_ID == CustomerDim@Cust_ID,",
				"     negate:true,",
				"     broadcast: 'auto')~> existsNO",
				"existsNO alterRow(updateIf(true())) ~> alterRowUpdate",
				"existsNO alterRow(insertIf(true())) ~> alterRowInsert",
				"alterRowInsert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Cust_ID as integer,",
				"          Customer_Name as string,",
				"          Customer_location as string,",
				"          Purchase_Amount as integer,",
				"          Date_inserted as date,",
				"          Date_Updated as date",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['Cust_ID'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Cust_ID,",
				"          Customer_Name,",
				"          Customer_location,",
				"          Purchase_Amount",
				"     )) ~> sink1Insert",
				"alterRowUpdate sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Cust_ID as integer,",
				"          Customer_Name as string,",
				"          Customer_location as string,",
				"          Purchase_Amount as integer,",
				"          Date_inserted as date,",
				"          Date_Updated as date",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['Cust_ID'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Cust_ID,",
				"          Customer_Name,",
				"          Customer_location,",
				"          Purchase_Amount",
				"     )) ~> sink1Update"
			]
		}
	}
}