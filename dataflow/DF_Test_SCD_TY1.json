{
	"name": "DF_Test_SCD_TY1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DT_CustomerSource",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "DT_DimCustomer",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DT_DimCustomer",
						"type": "DatasetReference"
					},
					"name": "sink1Insert"
				}
			],
			"transformations": [
				{
					"name": "existsInsert"
				},
				{
					"name": "existsUpdate"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Cust_ID as integer,",
				"          Customer_Name as string,",
				"          Customer_location as string,",
				"          Purchase_Amount as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1",
				"source(output(",
				"          Cust_ID as integer,",
				"          Customer_Name as string,",
				"          Customer_location as string,",
				"          Purchase_Amount as integer,",
				"          Date_inserted as date,",
				"          Date_Updated as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2",
				"source1, source2 exists(source1@Cust_ID == source2@Cust_ID,",
				"     negate:true,",
				"     broadcast: 'auto')~> existsInsert",
				"source2, source1 exists(source2@Cust_ID == source1@Cust_ID,",
				"     negate:false,",
				"     broadcast: 'auto')~> existsUpdate",
				"existsUpdate alterRow() ~> alterRow1",
				"existsInsert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Cust_ID as integer,",
				"          Customer_Name as string,",
				"          Customer_location as string,",
				"          Purchase_Amount as integer,",
				"          Date_inserted as date,",
				"          Date_Updated as date",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Cust_ID,",
				"          Customer_Name,",
				"          Customer_location,",
				"          Purchase_Amount",
				"     )) ~> sink1Insert"
			]
		}
	}
}